{"version":3,"sources":["../src/index.ts","../src/API.ts"],"sourcesContent":["import { getAlbum, getPlaylist, getTrack } from \"./API\";\nimport { CustomPlugin, DisTubeError, Playlist, Song, checkInvalidKey } from \"distube\";\nimport type { VoiceBasedChannel } from \"discord.js\";\nimport type { PlayOptions, PlaylistInfo, Queue, SearchResult } from \"distube\";\n\nconst SUPPORTED_TYPES = [\"album\", \"playlist\", \"track\"];\n\nconst REGEX = /^https?:\\/\\/(?:www\\.)?deezer\\.com\\/(?:[a-z]{2}\\/)?(track|album|playlist)\\/(\\d+)\\/?(?:\\?.*?)?$/;\n\ntype Falsy = undefined | null | false | 0 | \"\";\nconst isTruthy = <T>(x: T | Falsy): x is T => Boolean(x);\n\ndeclare type DeezerPluginOptions = {\n  parallel?: boolean;\n  emitEventsAfterFetching?: boolean;\n};\n\nexport class DeezerPlugin extends CustomPlugin {\n  parallel: boolean;\n  emitEventsAfterFetching: boolean;\n  constructor(options: DeezerPluginOptions = {}) {\n    super();\n    if (typeof options !== \"object\" || Array.isArray(options)) {\n      throw new DisTubeError(\"INVALID_TYPE\", [\"object\", \"undefined\"], options, \"DeezerPluginOptions\");\n    }\n    checkInvalidKey(options, [\"parallel\", \"emitEventsAfterFetching\", \"api\"], \"DeezerPluginOptions\");\n    this.parallel = options.parallel ?? true;\n    if (typeof this.parallel !== \"boolean\") {\n      throw new DisTubeError(\"INVALID_TYPE\", \"boolean\", this.parallel, \"DeezerPluginOptions.parallel\");\n    }\n    this.emitEventsAfterFetching = options.emitEventsAfterFetching ?? false;\n    if (typeof this.emitEventsAfterFetching !== \"boolean\") {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"boolean\",\n        this.emitEventsAfterFetching,\n        \"DeezerPluginOptions.emitEventsAfterFetching\",\n      );\n    }\n  }\n\n  parseURL(url: string): { type?: string; id?: string } {\n    const [, type, id] = url.match(REGEX) ?? [];\n    return { type, id };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async validate(url: string) {\n    if (typeof url !== \"string\" || !url.includes(\"deezer\")) return false;\n    const { type, id } = this.parseURL(url);\n    if (!type || !id || !SUPPORTED_TYPES.includes(type)) return false;\n    return true;\n  }\n\n  async play(voiceChannel: VoiceBasedChannel, url: string, options: PlayOptions) {\n    const DT = this.distube;\n    const { member, textChannel, skip, position, metadata } = Object.assign({ position: 0 }, options);\n    const { type, id } = this.parseURL(url);\n    if (!type || !id) {\n      throw new DisTubeError(\"DEEZER_PLUGIN_INVALID_URL\", `Invalid Deezer url: ${url}`);\n    }\n    const api = type === \"track\" ? getTrack(id) : type === \"album\" ? getAlbum(id) : getPlaylist(id);\n    const data = await api.catch(e => {\n      throw new DisTubeError(\"DEEZER_PLUGIN_API_ERROR\", e.message);\n    });\n    if (!data.type || !SUPPORTED_TYPES.includes(data.type)) {\n      throw new DisTubeError(\"DEEZER_PLUGIN_NOT_SUPPORTED\", \"This deezer link is not supported.\");\n    }\n    if (data.type === \"track\") {\n      const query = `${data.title} ${data.contributors.map((a: any) => a.name).join(\" \")}`;\n      const result = await this.search(query);\n      if (!result) throw new DisTubeError(\"DEEZER_PLUGIN_NO_RESULT\", `Cannot find \"${query}\" on YouTube.`);\n      await DT.play(voiceChannel, result, options);\n    } else {\n      const name = data.title;\n      const thumbnail =\n        data.type == \"album\"\n          ? data.cover_xl || data.cover_big || data.cover_medium || data.cover\n          : data.picture_xl || data.picture_big || data.picture_medium || data.picture;\n      const queries: string[] = data.tracks.data.map((t: any) => `${t.title} ${t.artist.name}`);\n      const url = data.link;\n      let firstSong: Song | undefined;\n      const getFirstSong = async () => {\n        const firstQuery = queries.shift();\n        if (!firstQuery) return;\n        const result = await this.search(firstQuery);\n        if (!result) return;\n        firstSong = new Song(result, { member, metadata });\n      };\n      while (!firstSong) {\n        await getFirstSong();\n      }\n\n      if (!firstSong) {\n        throw new DisTubeError(\"DEEZER_PLUGIN_NO_RESULT\", `Cannot find any tracks of \"${name}\" on YouTube.`);\n      }\n      const queue = DT.getQueue(voiceChannel);\n\n      const playlistInfo: PlaylistInfo = {\n        source: \"deezer\",\n        songs: [firstSong],\n        name,\n        thumbnail,\n        member,\n        url,\n      };\n      const playlist = new Playlist(playlistInfo, { member, metadata });\n      const fetchTheRest = async (q: Queue, fs: Song) => {\n        if (queries.length) {\n          let results: (SearchResult | null)[] = [];\n          if (this.parallel) {\n            results = await Promise.all(queries.map(query => this.search(query)));\n          } else {\n            for (let i = 0; i < queries.length; i++) {\n              results[i] = await this.search(queries[i]);\n            }\n          }\n          playlist.songs = results.filter(isTruthy).map(r => {\n            const s = new Song(r, { member, metadata });\n            s.playlist = playlist;\n            return s;\n          });\n          q.addToQueue(playlist.songs, !skip && position > 0 ? position + 1 : position);\n        }\n        playlist.songs.unshift(fs);\n      };\n      if (queue) {\n        queue.addToQueue(firstSong, position);\n        if (skip) queue.skip();\n        else if (!this.emitEventsAfterFetching) DT.emit(\"addList\", queue, playlist);\n        await fetchTheRest(queue, firstSong);\n        if (!skip && this.emitEventsAfterFetching) DT.emit(\"addList\", queue, playlist);\n      } else {\n        let newQueue = await DT.queues.create(voiceChannel, firstSong, textChannel);\n        while (newQueue === true) {\n          await getFirstSong();\n          newQueue = await DT.queues.create(voiceChannel, firstSong, textChannel);\n        }\n        if (!this.emitEventsAfterFetching) {\n          if (DT.options.emitAddListWhenCreatingQueue) DT.emit(\"addList\", newQueue, playlist);\n          DT.emit(\"playSong\", newQueue, firstSong);\n        }\n        await fetchTheRest(newQueue, firstSong);\n        if (this.emitEventsAfterFetching) {\n          if (DT.options.emitAddListWhenCreatingQueue) DT.emit(\"addList\", newQueue, playlist);\n          DT.emit(\"playSong\", newQueue, firstSong);\n        }\n      }\n    }\n  }\n\n  async search(query: string) {\n    try {\n      return (await this.distube.search(query, { limit: 1 }))[0];\n    } catch {\n      return null;\n    }\n  }\n}\n\nexport default DeezerPlugin;\n","import { Pool } from \"undici\";\nimport type { AlbumResponse, PlaylistResponse, TrackResponse } from \"./type\";\n\nconst api = new Pool(\"https://api.deezer.com\");\n\nconst get = async (path: string): Promise<any> => {\n  const { body } = await api.request({\n    path,\n    method: \"GET\",\n  });\n\n  const data = await body.json();\n  if (data.error) throw new Error(data.error?.message);\n  return data;\n};\n\nexport const getTrack = async (id: string): Promise<TrackResponse> => get(`/track/${id}`);\n\nexport const getAlbum = async (id: string): Promise<AlbumResponse> => get(`/album/${id}`);\n\nexport const getPlaylist = async (id: string): Promise<PlaylistResponse> => get(`/playlist/${id}`);\n"],"mappings":"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","names":["api","url"]}